==================
Master programming
==================

----------------
Домашнее задание
----------------

:Author: Игорь Шаронов
:Date: 2019-09-01

Описание домашней работы
========================

Из чего состоят задания
-----------------------

* Домашнее задание <=> лабораторные работы
* 6 заданий на написание кода

  * 2 задания имеют одну подзадачу

* 1 задание на написание теста
* всего 8 заданий по 10 баллов каждое
* 23 вопроса формируют дополнительные баллы
* 5 дополнительных вопросов (плавающая оценка)
* 3 дополнительных задания на самостоятельную работу

Порядок сдачи лабораторной работы
---------------------------------

* Создаём пулл-реквест со сделанной и протестированной лабораторной
* Вешаем его на ``igsha``
* Получаем список замечаний
* Исправляем замечания поверх старого кода, без добавления коммита::

   git commit -a --amend
   git push --force

* Получаем новые замечания и идём на предыдущий пункт
* Если всё в порядке, ``igsha`` примет пулл-реквест и замёржит изменения в мастер
* В комментарии будет количество набранных баллов:

  * Если всё исправлено и замечаний больше нет, то максимальное количество баллов
  * Возможен торг: некоторые замечания можно не исправлять, тогда просто снизится количество баллов
  * За просрок баллы нельзя добрать, только с помощью ответов на вопросы

Снижение баллов
---------------

* Каждая лабораторная сдаётся в течение 2-х недель
* По истечении срока максимальный балл **каждый раз** снижается на 1
* Меньше 6 баллов за лабораторную нельзя получить

  * Если такая ситуация возникает, торговаться уже не получится: надо исправить **все** замечания

* Замечания к лабораторным:

  * Критичные --- какая-то функциональность сделана неправильно (торг не уместен)
  * Некритичные (nit-pick) --- что-то можно сделать удобнее/лучше/нагляднее (торг уместен)

Инициализация репозитория
=========================

Использование шаблона для репозитория
-------------------------------------

* https://github.com/cvlabmiet/master-programming-task --- отсюда брать шаблон репозитория
* Использовать ``Use this template``

.. image:: use-template.png

Приватность работы
------------------

* Домашняя работа должна быть изолирована
* Достигается приватностью репозитория

.. image:: private-repo.png

Настройка слияний веток
-----------------------

* Каждая лабораторная делается в своей ветке
* Допускается только рибейз веток
* **Не допускаются коммиты напрямую в мастер**

.. image:: merge-settings.png

Добавление проверяющего
-----------------------

* Необходимо предоставить совместный доступ ``igsha`` к своему репозиторию
* После этого можно будет назначать ``igsha`` проверяющим пулл-реквесты

.. image:: add-collaborator.png

Настройка непрерывной интеграции
================================

Использование Github-Actions
----------------------------

* Для проверки собираемости заданий используется сервис непрерывной интеграции github-actions
* Сервис доступен автоматически, ничего настраивать не нужно
* При создании пулл-реквеста сервис соберёт и протестирует новые изменения

.. image:: github-actions.png

Интеграция в пулл-реквесты
==========================

Автоматическая проверка
-----------------------

* Если всё настроено правильно, то при очередном пулл-реквесте будет информация о сборке проекта
* Автоматическая сборка исходников на базе docker + nix-shell
* Автоматический запуск тестов
* Невозможность слияния веток в мастер при наличии ошибок

.. image:: failed-task.png

Пример пулл-реквеста
--------------------

* В настройках пользователя написать своё имя (либо в сообщении пулл-реквеста)
* В тело сообщения вставить лог прохождения тестов
* В reviewers или assignees назначить ``igsha``
* Все автоматические проверки должны быть успешно пройдены

.. image:: successed-task.png

Способы сборки проекта
======================

Платформа Linux
---------------

Два способа сборки проекта

#. Вручную устанавливаем нужные пакеты
   * ``gnumake`` (можно ``ninja``)
   * ``cmake`` версии не ниже 3.12
   * ``gcc`` или ``clang`` с поддержкой 17-го стандарта C++
   * ``catch2`` версии не ниже 2.8
   * ``boost`` версии не ниже 1.68
   * ``gdb`` для отладки кода

#. Используя nix-shell
   * устанавливаем `nix-shell <https://nixos.org/nix/>`_ по команде ``curl https://nixos.org/nix/install | sh``
   * в корне проекта вызываем команду ``nix-shell``.
     После этого ``nix`` сам установит и скачает нужные пакеты

Платформа Windows
-----------------

* Разработка будет вестись с помощью Visual Studio Community (бесплатная лицензия)
* Поддержка ``cmake`` уже встроена в студию
* Пакеты ``boost`` и ``catch2`` будем устанавливать с помощью ``vcpkg``
* По желанию можно поставить `плагин <https://marketplace.visualstudio.com/items?itemName=JohnnyHendriks.ext01>`_
  для отображения тестов ``catch2``

Если есть желание, можно поиграться в nix-shell, при наличии в системе WSL.

Платформа Windows (установка и настройка VS)
--------------------------------------------

* Устанавливаем `Visual Studio Community <https://visualstudio.microsoft.com/free-developer-offers>`_
* При установке указываем ``Desktop development with C++``
* Выбираем дополнительный пакет ``C++ CMake tools for Windows``

.. image:: vs-setup.png

Платформа Windows (установка пакетов)
-------------------------------------

* Используя Visual Studio клонируем проект https://github.com/Microsoft/vcpkg
  * Рекомендуется отключить автоматическую генерацию ``cmake``
* Запускаем командную оболочку ``Tools -> Command Line -> Developers Power Shell``
* Далее все команды делаются из одной и той же командной оболочки
* Собираем пакетный менеджер `vcpkg <https://docs.microsoft.com/ru-ru/cpp/build/vcpkg?view=vs-2019>`_
  * ``.\bootstrap-vcpkg``

* Устанавливаем нужные пакеты
  * ``.\vcpkg install catch2:x64-windows``
  * ``.\vcpkg install boost:x64-windows``
  * установка занимает около 50 минут

* Интегрируем пакетный менеджер в Visual Studio
  * ``.\vcpkg integrate install``
  * данная команда автоматически изменит cmake тулчейн для всех проектов
  * после этой команды надо будет перезапустить Visual Studio

Платформа Windows (разработка)
------------------------------

* Открываем директорию с проектом (или клонируем его)
* Добавляем vcpkg пакеты в настройки проекта,
  согласно `инструкции <https://vcpkg.readthedocs.io/en/latest/examples/installing-and-using-packages/#cmake>`_:
  * CMakeLists.txt -> Change Cmake Settings::

        "variables": [
            {
                "name": "CMAKE_TOOLCHAIN_FILE",
                "value": "[путь до vcpkg]/scripts/buildsystems/vcpkg.cmake"
            }
        ]

* Генерируем сборочное дерево (``Generate Cache``)
* Собираем проект привычным способом
* Запускаем тесты (либо через адаптер, либо ``Test -> Run CTests``)
* Следим, чтобы в коммит не попало левых изменений (``CMakeSettings.json``, ``out`` и т.д.)

Платформа Eclipse-Che (браузер)
-------------------------------

* https://che.openshift.io
* Достаточно только браузера
* Логиниться на ресурс через github-аккаунт
* Создаём workspace из файла ``eclipse-che.yml`` внутри репозитория с заданиями

* Внутри workspace:
  * Ничего не сохраняется, поэтому надо свои изменения пушить на сервер
  * Перейти в настройки и установить почту для Git (``<username>@users.noreply.github.com``) ---
    это влияет на ошибку пуша своей ветки на github

* Поддерживает intellisense (но не всё доступно, так как компиляция и GUI находятся в разных докерах)
* Поддерживает отладку (но не все объекты можно посмотреть)
* Поддерживает git: создание веток, коммит, пуш изменений на сервер
* Есть окно терминала для "тонкой" отладки
* См. видео лекцию по подготовке лабораторных работ
