Функциональное программирование
===============================

Phoenix
-------

* `boost/phoenix/ <https://www.boost.org/libs/phoenix>`_
* Позволяет писать лямбда-выражения без использования синтаксиса лямбда-функций
* Основано на отложенных объектах
* Всё работает благодаря перегрузке всех операторов заместителя (placeholder)
* Используется функциональные объекты
  * ``val`` для заместителя значения переменной, ``ref`` --- для ссылки (область захвата лямбда-выражения)
  * ``arg1`` для заместителя аргумента лямбда-выражения (всегда возвращает свой первый аргумент)
* ``boost::phoenix::function`` нужен для декорации своего функтора
* Макрос ``BOOST_PHOENIX_ADAPT_FUNCTION`` используется для формирования отложенной лямбды из C-функции
* ``boost::phoenix::bind`` --- альтернатива предыдущему
* Дополнительный синтаксис
  * ``if_`` для записи условных выражений
  * ``[ st1, st2, st3 ]`` равносильно определению блока кода ``{ st1; st2; st3; }``

.. code:: cpp

    using namespace boost::phoenix::placeholders;

    std::vector v{{1, 2, 3, 4, 5}};
    std::for_each(v.begin(), v.end(), std::cout << arg1 << ",");

Функциональные объекты
----------------------

* `boost/function.hpp <https://www.boost.org/libs/function>`_
* Функциональный объект для функции, метода класса, функтора, лямбда-выражения
* Эквивалентно ``std::function``

* `boost/bind.hpp <https://www.boost.org/libs/bind>`_
* Предоставляет механизм уменьшения аргументов функции
* Эквивалентно ``std::bind``
* Используется там, где лямбды будут выглядеть громоздко

* `boost/ref.hpp <http://www.boost.org/doc/html/ref.html>`_
* Служит для передачи параметров по ссылке в ``std::bind``
* У ``boost::ref`` есть версия с константной ссылкой ``boost::cref``
* Эквивалентно ``std::ref`` и ``std::cref``

Lambda
------

* `boost/lambda/ <https://www.boost.org/libs/lambda>`_
* Библиотека устарела в связи с появлением ``boost::phoenix`` и лямбда-выражений в C++11

.. code:: cpp

    std::vector v{{1, 3, 2}};
    std::for_each(v.begin(), v.end(),
        boost::lambda::if_then(boost::lambda::_1 > 1, std::cout << boost::lambda::_1 << "\n")
    );
