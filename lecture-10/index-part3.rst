Стуктурные паттерны
===================

Общие сведения
--------------

Определящие структуру класса

Adapter (адаптер)
-----------------

.. class:: column50

    .. image:: adapter.uml.svg

.. class:: column50

    * Переопределение интерфейса
    * Клиент должен выделить отдельно ``ClientInterface``

Пример: ``std::queue``

Bridge (мост)
-------------

.. class:: column50

    .. image:: bridge.uml.svg

.. class:: column50

    * Усложнённый адаптер (два адаптера)
    * Клиент использует ``ComplexAdapter`` или одно из его уточнений ``Refinement``
    * Одновременное развитие ``ComplexAdapter`` и ``Target``

Пример: приложение для отрисовки компонент использует абстракцию с примитивами, которые, в свою очередь,
рисуются благодаря интерфейсу графического менеджера. Последний может быть реализован по-разному
(OpenGL, например)

Composite (компоновщик)
-----------------------

.. class:: column50

    .. image:: composite.uml.svg

.. class:: column50

    * Ведёт себя как один объект
    * Все вызовы делегирует хранящимся в нём объектам
    * Иногда может агрегировать объекты
    * Хранимые объекты должны быть того же типа ``SomeInterface``, что и компоновщик

Пример: группировка объектов в графическом редакторе

Decorator (декоратор)
---------------------

.. class:: column50

    .. image:: decorator.uml.svg

.. class:: column50

    * Повторяет интерфейс оборачиваемого объекта
    * Все вызовы делегируются оборачиваемым объектам, вызывая дополнительный код до или после операций объекта

Пример: рисование рамки вокруг символов, умляуты на глифах

Facade (фасад)
--------------

.. class:: column33

    .. image:: facade.uml.svg

.. class:: column66

    * Фасад необходим для упрощения использования несколькими системами классов или фреймворков
    * Реализует новый интерфейс
    * Содержит в себе много различных классов или подсистем
    * Частный случай фасада --- адаптер
    * Излишняя осведомлённость обо всех объектах
    * Склонен становиться "божественным объектом"

Пример: почти все объекты вокруг

Flyweight (легковес)
--------------------

.. class:: column50

    .. image:: flyweight.uml.svg

.. class:: column50

    * ``Flyweight`` какая-либо повторяющая сущность объектов
    * Экономия памяти
    * Разделение объекта на более маленькие куски
    * Не подходит для уникальных объектов

Пример: повторяющиеся элементы объектов в играх

Proxy (заместитель)
-------------------

.. class:: column50

    .. image:: proxy.uml.svg

.. class:: column50

    * Адаптер и декоратор в одном лице, а также фасад
    * В основном используется для кеширования результатов
    * В качестве кеша может использоваться сложный сервис (с запросами по сети, сохранениями файлов и т.д.)

Пример: ``std::vector<bool>::reference``
